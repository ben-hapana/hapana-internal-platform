name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: hapana-internal-platform
  REGION: us-central1

jobs:
  # Fast build and test job for PRs
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Build Next.js application
      run: npm run build
      env:
        # Use dummy values for build validation
        NEXT_PUBLIC_FIREBASE_API_KEY: "dummy-key"
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: "dummy.firebaseapp.com"
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: "dummy-project"
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: "dummy-project.appspot.com"
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: "1:123456789:web:abcdef"
        NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: "G-ABCDEF"
        OPENAI_API_KEY: "dummy-openai-key"

    - name: Notify Slack - PR Build Status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        custom_payload: |
          {
            "attachments": [
              {
                "color": "${{ job.status == 'success' && '#36a64f' || '#ff0000' }}",
                "title": "${{ job.status == 'success' && '✅ PR Build Successful' || '❌ PR Build Failed' }}",
                "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "fields": [
                  {
                    "title": "PR",
                    "value": "#${{ github.event.number }} - ${{ github.event.pull_request.title }}",
                    "short": false
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Duration",
                    "value": "~2 minutes",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Production deployment job for main branch
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    # Only deploy on main branch pushes (not PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Cache Google Cloud CLI
      uses: actions/cache@v4
      with:
        path: |
          ~/.config/gcloud
        key: ${{ runner.os }}-gcloud-${{ hashFiles('.github/workflows/deploy.yml') }}
        restore-keys: |
          ${{ runner.os }}-gcloud-

    - name: Install dependencies
      run: npm ci

    - name: Build Next.js application
      run: npm run build

    - name: Notify Slack - Deployment Started
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "Hapana Internal Platform deployment started",
            "attachments": [
              {
                "color": "#666666",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Enable required Google Cloud APIs
      run: |
        gcloud services enable artifactregistry.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable cloudbuild.googleapis.com

    - name: Configure Docker for Google Cloud
      run: |
        gcloud auth configure-docker
        gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and Push Docker image
      run: |
        # Try Artifact Registry first, fallback to Container Registry
        if gcloud artifacts repositories create $SERVICE_NAME \
          --repository-format=docker \
          --location=us-central1 \
          --description="Docker repository for $SERVICE_NAME" 2>/dev/null || \
           gcloud artifacts repositories describe $SERVICE_NAME \
          --location=us-central1 2>/dev/null; then
          
          echo "Using Artifact Registry"
          REGISTRY_URL="us-central1-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME"
          
        else
          echo "Falling back to Container Registry"
          REGISTRY_URL="gcr.io/$PROJECT_ID/$SERVICE_NAME"
        fi
        
        echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
        
        # Build image with Docker layer caching
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=registry,ref=$REGISTRY_URL:cache \
          --cache-to type=registry,ref=$REGISTRY_URL:cache,mode=max \
          --tag $REGISTRY_URL:$GITHUB_SHA \
          --tag $REGISTRY_URL:latest \
          --push \
          --build-arg NEXT_PUBLIC_FIREBASE_API_KEY="${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_PROJECT_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_APP_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID="${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}" \
          --build-arg OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          .

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image $REGISTRY_URL:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 10 \
          --min-instances 0 \
          --concurrency 80 \
          --port 3000 \
          --set-env-vars "NODE_ENV=production" \
          --set-env-vars "NEXT_TELEMETRY_DISABLED=1" \
          --set-env-vars "FIREBASE_ADMIN_PROJECT_ID=${{ secrets.FIREBASE_ADMIN_PROJECT_ID }}" \
          --set-env-vars "FIREBASE_ADMIN_CLIENT_EMAIL=${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}" \
          --set-env-vars "FIREBASE_ADMIN_PRIVATE_KEY=${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}" \
          --set-env-vars "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" \
          --set-env-vars "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" \
          --set-env-vars "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" \
          --set-env-vars "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" \
          --set-env-vars "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" \
          --set-env-vars "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}"

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region $REGION \
          --format "value(status.url)")
        echo "Service deployed to: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Run basic health check
      run: |
        sleep 30  # Wait for service to be ready
        curl -f $SERVICE_URL/api/health || echo "Health check failed, but deployment completed"

    - name: Notify Slack - Deployment Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [
              {
                "color": "#36a64f",
                "title": "🚀 Fast Preview Deployment Successful!",
                "title_link": "${{ env.SERVICE_URL }}",
                "text": "Quick feedback deployment ready for testing",
                "fields": [
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Type",
                    "value": "Fast Preview",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Duration",
                    "value": "~3 minutes",
                    "short": true
                  }
                ],
                "footer": "Hapana Internal Platform Pipeline",
                "actions": [
                  {
                    "type": "button",
                    "text": "🌐 Preview App",
                    "url": "${{ env.SERVICE_URL }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack - Deployment Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "attachments": [
              {
                "color": "#ff0000",
                "title": "❌ Hapana Internal Platform deployment failed!",
                "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "text": "Quick feedback deployment needs attention",
                "fields": [
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Type",
                    "value": "Fast Preview",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Failed Stage",
                    "value": "Web Admin Deployment",
                    "short": true
                  },
                  {
                    "title": "Service Name",
                    "value": "${{ env.SERVICE_NAME }}",
                    "short": true
                  },
                  {
                    "title": "Region",
                    "value": "${{ env.REGION }}",
                    "short": true
                  }
                ],
                "footer": "Hapana3 Fast Preview Pipeline",
                "actions": [
                  {
                    "type": "button",
                    "text": "🔗 View GitHub Actions",
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "type": "button",
                    "text": "📋 View Repository",
                    "url": "https://github.com/${{ github.repository }}"
                  },
                  {
                    "type": "button",
                    "text": "☁️ Cloud Run Logs",
                    "url": "https://console.cloud.google.com/run/detail/${{ env.REGION }}/${{ env.SERVICE_NAME }}/logs?project=${{ env.PROJECT_ID }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

 